//===== rAthena Script =======================================
//= Job Master
//===== By: ==================================================
//= Euphy
//===== Current Version: =====================================
//= 1.5
//===== Compatible With: ===================================== 
//= rAthena Project
//===== Description: =========================================
//= A fully functional job changer.
//===== Additional Comments: =================================
//= 1.0 Initial script.
//= 1.1 Fixed reset on Baby job change.
//= 1.2 Added Expanded Super Novice support and initial Kagerou/Oboro support.
//= 1.3 Kagerou/Oboro added.
//= 1.4 Rebellion added.
//= 1.5 Added option to disable RebirthClass. [mazvi]
//= 1.6 Added option to get weapons on job change.
//= 1.7 Readability changes.
//============================================================

prontera,153,193,6	script	Job Master	123,{
function Job_Menu;
function Get_Job_Equip;
// Checks if the Player has the required level.
// closes if not, returns if yes
function	RequireLevel	{
	if (BaseLevel < getarg(0) || JobLevel < getarg(1)) {
		.@blvl = getarg(0) - BaseLevel;
		.@jlvl = getarg(1) - JobLevel;
		mes "Level requirement: "+getarg(0)+" / "+getarg(1);
		mes "You need " +
			((.@blvl > 0) ? .@blvl + " more base levels " + ((.@jlvl > 0) ? "/ " : "") : "") +
			((.@jlvl > 0) ? .@jlvl + " more job levels " : "") + "to continue.";
		close;
	}
	return;
}

// Function to get the job change possibilities.
// return 0 on success, possibilities will be held in 
// the temporary character array .@job_opt
// returns > 0 on failure, see 
// TODO comment needed?

// Check if there are more Jobs available
/*
function	Last_Job	{
	if (Class > Job_Soul_Linker) {
		// Everything above is Third Class
		// No more job changes possible
		return true;
	}
	// Custom Jobs; job change not posssible
	switch(Class) {
		case JOB_KNIGHT2:	case JOB_CRUSADER2:		case JOB_WEDDING:
		case JOB_XMAS:		case JOB_SUMMER:		case JOB_HANBOK:
		case JOB_OKTOBERFEST: case JOB_LORD_KNIGHT2:	case JOB_LORD_KNIGHT2:
		case JOB_LORD_KNIGHT2:
			return true;
	}
	return false;
}
TODO: Last_Job isn't necessary anymore. But I'll keep that here as a comment to check the classes above.
*/

// Checks if the player can change to third class.
// Note: This does not include the level checks.
function	canChangeThird	{
	if( !.ThirdClass )
		return false;
	// TODO
	// To change to third class you either need to be:
	// * Second Class
	// * Transcendent Second Class
}

function	canRebirth	{
	if( !.RebirthClass )
		return false;
	// To rebirth, you either need to be:
	// * Second Class
	// TODO
}
function	checkRiding	{
	if (checkfalcon() || checkcart() || checkriding() || ismounting()) {
		mes "Please remove your " +
			((checkfalcon()) ? "falcon" : "") +
			((checkcart()) ? "cart" : "") +
			((checkriding()) ? "Peco" : "") +
			((ismounting()) ? "mount" : "") +
			" before proceeding.";
		close;
	}
	return;
}
function	checkSkillPoints	{
	if (.SkillPointCheck && SkillPoint) {
		mes "Please use all your skill points before proceeding.";
		close;
	}
	return;
}

// Begin of the NPC
	mes .NPCName$;
	checkRiding();
	checkSkillPoints();

	// initialisation
	deletearray .@job_opt[0],getarraysize(.@job_opt);
	.@eac = eaclass();
	.@third_possible = canChangeThird();
	.@rebirth_possible = canRebirth();
	// Note: These are already set in pc.c
	// BaseClass = .@eac&EAJ_BASEMASK which is the players First Class
	// BaseJob = .@eac&EAJ_UPPERMASK which is the players Second Class
	dispbottom "Debug: eac ("+.@eac+"), third ("+.@third_possible
		+"), rebirth("+.@rebirth_possible+")";
		
	// From here on the jobmaster checks the current class
	// and fills the the array `.@job_opt` with possible
	// job options for the player.
	
	//Check for Rebirth and Third Class
	// Option should be at the top of the menu
	if( .@rebirth_possible ) {
		// Rebirth option (displayed on the top of the menu)
		RequireLevel(.Req_Rebirth[0], .Req_Rebirth[1]);
		setarray .@job_opt[getarraysize(.@job_opt)],
			.CHANGE_REBIRTH;
	}
	if( .@third_possible ) {
		RequireLevel(.Req_Third[0], .Req_Third[1]);
		setarray .@job_opt[getarraysize(.@job_opt)],
			.CHANGE_THIRD;
	}
	
	if (.SecondExpanded && (.@eac&EAJ_UPPERMASK) == EAJ_SUPER_NOVICE) {
		// (Baby) Super Novice to Expanded (Baby) Super Novice
		RequireLevel(.Req_Exp_SNOVI[0], .Req_Exp_SNOVI[1]);
		setarray .@job_opt[getarraysize(.@job_opt)],
			roclass(.@eac|EAJL_THIRD); // Expanded SN is "third" cls
	}
	if (.SecondExpanded && (Class == Job_Ninja || Class == Job_Gunslinger)) { // TODO: Baby Classes are missing
		// (Baby) Ninja to (Baby) Kagerou / Oboro
		// (Baby) Gunslinger to (Baby) Rebellion
		RequireLevel(.Req_Exp_NJ_GS[0], .Req_Exp_NJ_GS[1]);
		setarray .@job_opt[getarraysize(.@job_opt)],
			.@class1; // TODO class1 seems wrong
	}
	
	// Player is Job_Novice, Job_Novice_High or Job_Baby
	if (BaseClass == EAJ_NOVICE) {
		// MAPID_NOVICE, MAPID_SUPER_NOVICE, MAPID_NOVICE_HIGH, MAPID_BABY
		// TODO: MAPID_SUPER_NOVICE should lead to an error (ingame test)
		RequireLevel(.Req_First[0], .Req_First[1]);
		switch(Class) {
			case Job_Novice:
				// First job change
				setarray .@job_opt[getarraysize(.@job_opt)],Job_Swordman,
					Job_Mage, Job_Archer, Job_Acolyte, Job_Merchant, Job_Thief,
					Job_Super_Novice, Job_Taekwon, Job_Gunslinger, Job_Ninja,
					Job_Baby;
				break;
			case Job_Novice_High:
				// Job change after rebirth
				if( .LastJob && lastJob )
					setarray .@job_opt[getarraysize(.@job_opt)],
						roclass((eaclass(lastJob)&EAJ_BASEMASK)|EAJL_UPPER);
				else
					setarray .@job_opt[getarraysize(.@job_opt)],
						Job_Swordman_High, Job_Mage_High, Job_Archer_High,
						Job_Acolyte_High, Job_Merchant_High, Job_Thief_High;
				break;
			case Job_Baby:
				// First job change as a baby
				setarray .@job_opt[getarraysize(.@job_opt)],
					Job_Baby_Swordman, Job_Baby_Mage, Job_Baby_Archer,
					Job_Baby_Acolyte, Job_Baby_Merchant, Job_Baby_Thief,
					Job_Super_Baby;
				break;
			default:
				mes "An error has occurred.";
				close;
		}
	}
	
	// Player is: 
	// * First Class
	// * Transcendend First Class
	// * Baby First Class
	// most jobs should have two options here  (2-1 and 2-2)
	if( .@eac <= EAJL_NINJA || 						// First Class
		(.@eac&(~JOBL_UPPER)) <= EAJL_NINJA || 		// Trans. First Cls
		(.@eac&(~JOBL_BABY)) <= EAJL_NINJA ) {		// Baby First Cls
		.@class1 = roclass(.@eac|EAJL_2_1); // 2-1
		.@class2 = roclass(.@eac|EAJL_2_2); // 2-2
		if(.LastJob && lastJob && (.@eac&EAJL_UPPER)) {
			// Player is rebirth Cls and linear class changes are enforced
			setarray .@job_opt[getarraysize(.@job_opt)], 
				lastJob + Job_Novice_High;
			// TODO should we add a check here if lastJob+Job_Novice_High
			// is really either .@class1 or .@class2?
		} else {
			// Class is not enforced, player can decide.
			if( .@class1 > 0 ) { // 2-1
				RequireLevel(1, .Req_Second[1]); // TODO: No BaseLevel required?
				setarray .@job_opt[getarraysize(.@job_opt)], .@class1;
			}
			if( .@class2 > 0 ) { // 2-2
				RequireLevel(1, .Req_Second[1]); // TODO: No BaseLevel required?
				setarray .@job_opt[getarraysize(.@job_opt)], .@class2;
			}
		}
	}
	
	// TODO show the menu
	// Displaying the Job Menu defined by .@job_opt.
	// .@job_opt should not be changed below this line.
	Job_Change;
	while(1) {
		.@opt_cnt =  getarraysize(.@job_opt);
		if( .@opt_cnt <= 0 ) {
			mes "No more jobs are available.";
			close;
		}
		if (.@opt_cnt > 1) {
			// Multiple job classes given. Select one and save it to .@class
			mes "Select a job.";
			.@menu$ = "";
			for (.@i = 0; .@i < .@opt_cnt; .@i++)
				.@menu$ = .@menu$ + " ~ " + jobname(.@job_opt[.@i]) + ":";
			.@menu$ = .@menu$+" ~ ^777777Cancel^000000";
			next;
			.@selected = select(.@menu$) - 1;
			if( .@selected < 0 || .@selected > .@opt_cnt )
				close; // shouldn't happen
			.@class = .@job_opt[.@selected];
			if ((.@class == Job_Super_Novice || .@class == Job_Super_Baby) && BaseLevel < .SNovice) {
				mes .NPCName$;
				mes "A base level of " + .SNovice + " is required to turn into a " + jobname(.@class) + ".";
				close;
			}
			mes .NPCName$;
			mes "Are you sure?";
			next;
		} else {
			// Just one job class given
			.@class = .@job_opt[0];
		}
		// TODO class change confirm in extra func
		// Player confirms he want to change into .@class
		if (select(" ~ Change into ^0055FF" + jobname(.@class) + "^000000 class: ~ ^777777" + ((getargcount() > 1) ? "Go back" : "Cancel") + "^000000") == 1) {
			Job_Change(.@class);
		}
		if (.@opt_cnt == 1)
			close;
		mes .NPCName$;
	}
	end;
	close;

// Executes the actual jobchange and closes.
function	Job_Change	{
	.@to_cls = getarg(0);
	mes .NPCName$;
	mes "You are now " + callfunc("F_InsertArticle", jobname(.@to_cls)) + "!";
	if (.@to_cls == Job_Novice_High && .LastJob)
		lastJob = Class; // Saves the lastJob for rebirth
	jobchange .@to_cls;
	if (.@to_cls == Job_Novice_High)
		resetlvl(1);
	else if (.@to_cls == Job_Baby) {
		resetstatus;
		resetskill;
		set SkillPoint,0;
	}
	specialeffect2 EF_ANGEL2;
	specialeffect2 EF_ELECTRIC;
	if (.Platinum)
		Get_Platinum();
	if (.GetJobEquip)
		Get_Job_Equip(.@to_cls);
	close;
}

function	Get_Platinum	{
	skill "NV_FIRSTAID",1,SKILL_PERM;
	switch (BaseClass) {
	case Job_Novice:
		if (Class != Job_Super_Novice)
			skill "NV_TRICKDEAD",1,SKILL_PERM;
		break;
	case Job_Swordman:
		skill "SM_MOVINGRECOVERY",1,SKILL_PERM;
		skill "SM_FATALBLOW",1,SKILL_PERM;
		skill "SM_AUTOBERSERK",1,SKILL_PERM;
		break;
	case Job_Mage:
		skill "MG_ENERGYCOAT",1,SKILL_PERM;
		break;
	case Job_Archer:
		skill "AC_MAKINGARROW",1,SKILL_PERM;
		skill "AC_CHARGEARROW",1,SKILL_PERM;
		break;
	case Job_Acolyte:
		skill "AL_HOLYLIGHT",1,SKILL_PERM;
		break;
	case Job_Merchant:
		skill "MC_CARTREVOLUTION",1,SKILL_PERM;
		skill "MC_CHANGECART",1,SKILL_PERM;
		skill "MC_LOUD",1,SKILL_PERM;
		break;
	case Job_Thief:
		skill "TF_SPRINKLESAND",1,SKILL_PERM;
		skill "TF_BACKSLIDING",1,SKILL_PERM;
		skill "TF_PICKSTONE",1,SKILL_PERM;
		skill "TF_THROWSTONE",1,SKILL_PERM;
		break;
	default:
		break;
	}
	switch (BaseJob) {
	case Job_Knight:
		skill "KN_CHARGEATK",1,SKILL_PERM;
		break;
	case Job_Priest:
		skill "PR_REDEMPTIO",1,SKILL_PERM;
		break;
	case Job_Wizard:
		skill "WZ_SIGHTBLASTER",1,SKILL_PERM;
		break;
	case Job_Blacksmith:
		skill "BS_UNFAIRLYTRICK",1,SKILL_PERM;
		skill "BS_GREED",1,SKILL_PERM;
		break;
	case Job_Hunter:
		skill "HT_PHANTASMIC",1,SKILL_PERM;
		break;
	case Job_Assassin:
		skill "AS_SONICACCEL",1,SKILL_PERM;
		skill "AS_VENOMKNIFE",1,SKILL_PERM;
		break;
	case Job_Crusader:
		skill "CR_SHRINK",1,SKILL_PERM;
		break;
	case Job_Monk:
		skill "MO_KITRANSLATION",1,SKILL_PERM;
		skill "MO_BALKYOUNG",1,SKILL_PERM;
		break;
	case Job_Sage:
		skill "SA_CREATECON",1,SKILL_PERM;
		skill "SA_ELEMENTWATER",1,SKILL_PERM;
		skill "SA_ELEMENTGROUND",1,SKILL_PERM;
		skill "SA_ELEMENTFIRE",1,SKILL_PERM;
		skill "SA_ELEMENTWIND",1,SKILL_PERM;
		break;
	case Job_Rogue:
		skill "RG_CLOSECONFINE",1,SKILL_PERM;
		break;
	case Job_Alchemist:
		skill "AM_BIOETHICS",1,SKILL_PERM;
		break;
	case Job_Bard:
		skill "BA_PANGVOICE",1,SKILL_PERM;
		break;
	case Job_Dancer:
		skill "DC_WINKCHARM",1,SKILL_PERM;
		break;
	default:
		break;
	}
	return;
}

// Function which gives a job related item to the player
// the items are the rewards from the original job change quests
function	Get_Job_Equip	{
	if(getarg(0) >= 4054 && getarg(0) <= 4108)
		getitem 2795,1;	//	Green Apple Ring for 3rd Class
	switch(getarg(0))
	{	//First/Second | Rebirth First/Second | Baby First/Second
		case JOB_SWORDMAN:	case JOB_SWORDMAN_HIGH:	case JOB_BABY_SWORDMAN:
			getitem 1108,1;	break;	//	Blade [4]
		case JOB_MAGE:		case JOB_MAGE_HIGH:		case JOB_BABY_MAGE:
			getitem 1602,1;	break;	//	Rod [4]
		case JOB_ARCHER:	case JOB_ARCHER_HIGH:	case JOB_BABY_ARCHER:
			getitem 1705,1;	break;	//	Composite Bow [4]
		case JOB_ACOLYTE:	case JOB_ARCHER_HIGH:	case JOB_BABY_ACOLYTE:
			getitem 1505,1;	break;	//	Mace [4]
		case JOB_MERCHANT:	case JOB_MERCHANT_HIGH:	case JOB_BABY_MERCHANT:
			getitem 1302,1;	break;	//	Axe [4]
		case JOB_THIEF: 	case JOB_THIEF_HIGH:	case JOB_BABY_THIEF:
			getitem 1208,1;	break;	//	Main Gauche [4]
		case JOB_KNIGHT:	case JOB_LORD_KNIGHT:	case JOB_BABY_KNIGHT:
			getitem 1163,1;	break;	//	Claymore [0]
		case JOB_PRIEST:	case JOB_HIGH_PRIEST:	case JOB_BABY_PRIEST:
			getitem 1522,1;	break;	//	Stunner [0]
		case JOB_WIZARD:	case JOB_HIGH_PRIEST:	case JOB_BABY_WIZARD:
			getitem 1617,1;	break;	//	Survivor's Rod [0]
		case JOB_BLACKSMITH: case JOB_WHITESMITH:	case JOB_BABY_BLACKSMITH:
			getitem 1360,1;	break;	//	Two-Handed-Axe [1]
		case JOB_HUNTER:	case JOB_SNIPER:		case JOB_BABY_HUNTER:
			getitem 1718,1;	break;	//	Hunter Bow [0]
		case JOB_ASSASSIN:	case JOB_ASSASSIN_CROSS: case JOB_BABY_ASSASSIN:
			getitem 1254,1;	break;	//	Jamadhar [0]
		case JOB_CRUSADER:	case JOB_PALADIN:		case JOB_BABY_CRUSADER:
			getitem 1410,1;	break;	//	Lance [0]
		case JOB_MONK:		case JOB_CHAMPION:		case JOB_BABY_MONK:
			getitem 1807,1;	break;	//	Fist [0]
		case JOB_SAGE:		case JOB_PROFESSOR:		case JOB_BABY_SAGE:
			getitem 1550,1;	break;	//	Book [3]
		case JOB_ROGUE:		case JOB_STALKER:		case JOB_BABY_ROGUE:
			getitem 1222,1;	break;	//	Damascus [1]
		case JOB_ALCHEMIST:	case JOB_CREATOR:		case JOB_BABY_ALCHEMIST:
			getitem 1126,1;	break;	//	Saber [2]
		case JOB_BARD:		case JOB_CLOWN:			case JOB_BABY_BARD:
			getitem 1907,1;	break;	//	Guitar [0]
		case JOB_DANCER:	case JOB_GYPSY:			case JOB_BABY_DANCER:
			getitem 1960,1;	break;	//	Whip [1]
		case JOB_SUPER_NOVICE: case JOB_NOVICE_HIGH: case JOB_SUPER_BABY:
			getitem 1208,1;	break;	//	Main Gauche [4]
		case JOB_GUNSLINGER:
			getitem 13101,1; break;	//	Six Shooter [2]
		case JOB_NINJA:
			getitem 13010,1; break;	//	Asura [2]
		case JOB_STAR_GLADIATOR:
			getitem 1550,1;	break;	//	Book [3]
		case JOB_SOUL_LINKER:
			getitem 1617,1;	break;	//	Survivor's Rod [0]

		//=	3rd Class
		case JOB_RUNE_KNIGHT:	case JOB_RUNE_KNIGHT_T:		case JOB_BABY_RUNE:
			getitem 5746,1;	break;	//	Rune Circlet [1]
		case JOB_WARLOCK:	case JOB_WARLOCK_T:				case JOB_BABY_WARLOCK:
			getitem 5753,1;	break;	//	Magic Stone Hat [1]
		case JOB_RANGER:		case JOB_RANGER_T:			case JOB_BABY_RANGER:
			getitem 5748,1;	break;	//	Sniper Goggle [1]
		case JOB_ARCH_BISHOP:	case JOB_ARCH_BISHOP_T:		case JOB_BABY_BISHOP:
			getitem 5747,1;	break;	//	Mitra [1]
		case JOB_MECHANIC:		case JOB_MECHANIC_T:		case JOB_BABY_MECHANIC:
			getitem 5749,1;	break;	//	Driver Band [1]
		case JOB_GUILLOTINE_CROSS: case JOB_GUILLOTINE_CROSS_T: case JOB_BABY_CROSS:
			getitem 5755,1;	break;	//	Silent Executor [1]
		case JOB_ROYAL_GUARD:	case JOB_ROYAL_GUARD_T:		case JOB_BABY_GUARD:
			getitem 5757,1;	break;	//	Dip Schmidt Helm [1]
		case JOB_SORCERER:		case JOB_SORCERER_T:		case JOB_BABY_SORCERER:
			getitem 5756,1;	break;	//	Wind Whisper [1]
		case JOB_MINSTREL:		case JOB_MINSTREL_T:		case JOB_BABY_MINSTREL:
			getitem 5751,1;	break;	//	Maestro Song's Hat [1]
		case JOB_WANDERER:		case JOB_WANDERER_T:		case JOB_BABY_WANDERER:
			getitem 5758,1;	break;	//	Dying Swan [1]
		case JOB_SURA:			case JOB_SURA_T:			case JOB_BABY_SURA:
			getitem 5754,1;	break;	//	Blazing Soul [1]
		case JOB_GENETIC:		case JOB_GENETIC_T:			case JOB_BABY_GENETIC:
			getitem 5752,1;	break;	//	Midas Whisper[1]
		case JOB_SHADOW_CHASER:	case JOB_SHADOW_CHASER_T:	case JOB_BABY_CHASER:
			getitem 5750,1; getitem 6121,1; getitem 6122,1;	break;	//	Shadow Handicraft [1]
	}
	return;
}

OnInit:
	// Initialisation, do not edit these
	.NPCName$ = "[Job Master]";
	
	// .@job_opt is the main array for the available job changes.
	// Each element is a roclass or a "special" change:
	.CHANGE_REBIRTH = -1;
	.CHANGE_THIRD = -2;
	
	// Settings
	.ThirdClass = 1;			// Enable third classes? (1: yes / 0: no)
	.RebirthClass = 1;			// Enable rebirth classes? (1: yes / 0: no)
	.SecondExpanded = 1;		// Enable new expanded second classes: Ex. Super Novice, Kagerou/Oboro, Rebellion? (1: yes / 0: no)
	.LastJob = 1;				// Enforce linear class changes? (1: yes / 0: no)
	.SkillPointCheck = 1;		// Force player to use up all skill points? (1: yes / 0: no)
	.Platinum = 1;				// Get platinum skills automatically? (1: yes / 0: no)
	.GetJobEquip = 0;			// Get job equipment (mostly weapons) on job change? (1: yes / 0: no)
	
	// Level Requirements
	setarray .Req_First[0],1,10; 		// Minimum base level, job level to turn into 1st class
	setarray .Req_Second[0],1,40; 		// Minimum base level, job level to turn into 2nd class
	setarray .Req_Rebirth[0],99,50;		// Minimum base level, job level to rebirth
	setarray .Req_Third[0],99,50;		// Minimum base level, job level to change to third class
	setarray .Req_Exp_NJ_GS[0],99,70; 	// Minimum base level, job level to turn into Expanded Ninja and Gunslinger
	setarray .Req_Exp_SNOVI[0],99,99; 	// Minimum base level, job level to turn into Expanded Super Novice
	.SNovice = 45;						// Minimum base level to turn into Super Novice
	end;
}
